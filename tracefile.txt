void trace( ) {
  for( int i = 0; i < n_trace; i++){
    int isignal = tracearray[i];
    switch( isignal ){
      case   0: bf.fp   = Ts; break;
      case   1: bf.fp   = advancefactor; break;
      case   2: bf.fp   = i_vector_radpers; break;
      case   3: bf.fp   = i_vector_radpers_act; break;
      case   4: bf.fp   = i_vector_acc; break;
      case   5: bf.fp   = maxDutyCycle; break;
      case   6: bf.fp   = BEMFa; break;
      case   7: bf.fp   = BEMFb; break;
      case   8: bf.fp   = Ialpha_last; break;
      case   9: bf.fp   = Ibeta_last; break;
      case  10: bf.fp   = commutationoffset; break;
      case  11: bf.fp   = DQdisturbangle; break;
      case  12: bf.fp   = Vq; break;
      case  13: bf.fp   = Vd; break;
      case  14: bf.fp   = Valpha; break;
      case  15: bf.fp   = Vbeta; break;
      case  16: bf.fp   = thetawave; break;
      case  17: bf.fp   = Id_meas; break;
      case  18: bf.fp   = Iq_meas; break;
      case  19: bf.fp   = Id_meas_lp; break;
      case  20: bf.fp   = Iq_meas_lp; break;
      case  21: bf.fp   = VSP; break;
      case  22: bf.fp   = commutationoffset2; break;
      case  23: bf.fp   = DQdisturbangle2; break;
      case  24: bf.fp   = Vq2; break;
      case  25: bf.fp   = Vd2; break;
      case  26: bf.fp   = Valpha2; break;
      case  27: bf.fp   = Vbeta2; break;
      case  28: bf.fp   = thetawave2; break;
      case  29: bf.fp   = Id_meas2; break;
      case  30: bf.fp   = Iq_meas2; break;
      case  31: bf.fp   = Id_meas2_lp; break;
      case  32: bf.fp   = Iq_meas2_lp; break;
      case  33: bf.fp   = Va; break;
      case  34: bf.fp   = Vb; break;
      case  35: bf.fp   = Vc; break;
      case  36: bf.fp   = Va2; break;
      case  37: bf.fp   = Vb2; break;
      case  38: bf.fp   = Vc2; break;
      case  39: bf.fp   = adc2A1; break;
      case  40: bf.fp   = adc2A2; break;
      case  41: bf.fp   = one_by_sqrt3; break;
      case  42: bf.fp   = two_by_sqrt3; break;
      case  43: bf.fp   = sqrt_two_three; break;
      case  44: bf.fp   = sqrt3_by_2; break;
      case  45: bf.fp   = mechcontout; break;
      case  46: bf.fp   = Iout; break;
      case  47: bf.fp   = mechcontout2; break;
      case  48: bf.fp   = Iout2; break;
      case  49: bf.fp   = muziek_gain; break;
      case  50: bf.fp   = muziek_gain_V; break;
      case  51: bf.fp   = distval; break;
      case  52: bf.fp   = distoff; break;
      case  53: bf.fp   = ss_phase; break;
      case  54: bf.fp   = ss_fstart; break;
      case  55: bf.fp   = ss_fstep; break;
      case  56: bf.fp   = ss_fend; break;
      case  57: bf.fp   = ss_gain; break;
      case  58: bf.fp   = ss_offset; break;
      case  59: bf.fp   = ss_f; break;
      case  60: bf.fp   = ss_tstart; break;
      case  61: bf.fp   = ss_out; break;
      case  62: bf.fp   = T; break;
      case  63: bf.fp   = enc2rad; break;
      case  64: bf.fp   = enc2rad2; break;
      case  65: bf.fp   = I_max; break;
      case  66: bf.fp   = V_Bus; break;
      case  67: bf.fp   = rmech; break;
      case  68: bf.fp   = rdelay; break;
      case  69: bf.fp   = emech1; break;
      case  70: bf.fp   = ymech1; break;
      case  71: bf.fp   = rmech2; break;
      case  72: bf.fp   = emech2; break;
      case  73: bf.fp   = ymech2; break;
      case  74: bf.fp   = rmechoffset; break;
      case  75: bf.fp   = rmechoffset2; break;
      case  76: bf.fp   = sensBus_lp; break;
      case  77: bf.fp   = Kp; break;
      case  78: bf.fp   = fBW; break;
      case  79: bf.fp   = alpha1; break;
      case  80: bf.fp   = alpha2; break;
      case  81: bf.fp   = fInt; break;
      case  82: bf.fp   = fLP; break;
      case  83: bf.fp   = Kp2; break;
      case  84: bf.fp   = fBW2; break;
      case  85: bf.fp   = alpha1_2; break;
      case  86: bf.fp   = alpha2_2; break;
      case  87: bf.fp   = fInt2; break;
      case  88: bf.fp   = fLP2; break;
      case  89: bf.fp   = Vout; break;
      case  90: bf.fp   = fIntCur; break;
      case  91: bf.fp   = Kp_iq; break;
      case  92: bf.fp   = Kp_id; break;
      case  93: bf.fp   = Ki_iq; break;
      case  94: bf.fp   = Ki_id; break;
      case  95: bf.fp   = vq_int_state; break;
      case  96: bf.fp   = vd_int_state; break;
      case  97: bf.fp   = Vout2; break;
      case  98: bf.fp   = fIntCur2; break;
      case  99: bf.fp   = Icontgain2; break;
      case 100: bf.fp   = sensCalVal1; break;
      case 101: bf.fp   = sensCalVal2; break;
      case 102: bf.fp   = sensCalVal3; break;
      case 103: bf.fp   = sensCalVal4; break;
      case 104: bf.fp   = sens1; break;
      case 105: bf.fp   = sens2; break;
      case 106: bf.fp   = sens3; break;
      case 107: bf.fp   = sens4; break;
      case 108: bf.fp   = sens1_lp; break;
      case 109: bf.fp   = sens2_lp; break;
      case 110: bf.fp   = sens3_lp; break;
      case 111: bf.fp   = sens4_lp; break;
      case 112: bf.fp   = sens1_calib; break;
      case 113: bf.fp   = sens2_calib; break;
      case 114: bf.fp   = sens3_calib; break;
      case 115: bf.fp   = sens4_calib; break;
      case 116: bf.fp   = sensBus; break;
      case 117: bf.fp   = I_bus; break;
      case 118: bf.fp   = P_tot; break;
      case 119: bf.fp   = Busadc2Vbus; break;
      case 120: bf.fp   = Jload; break;
      case 121: bf.fp   = velFF; break;
      case 122: bf.fp   = R; break;
      case 123: bf.fp   = Jload2; break;
      case 124: bf.fp   = velFF2; break;
      case 125: bf.fp   = offsetVelTot; break;
      case 126: bf.fp   = offsetVel; break;
      case 127: bf.fp   = offsetVel_lp; break;
      case 128: bf.fp   = acc; break;
      case 129: bf.fp   = vel; break;
      case 130: bf.fp   = dist; break;
      case 131: bf.fp   = Ialpha; break;
      case 132: bf.fp   = Ibeta; break;
      case 133: bf.fp   = thetaPark; break;
      case 134: bf.fp   = thetaParkPrev; break;
      case 135: bf.fp   = edeltarad; break;
      case 136: bf.fp   = eradpers_lp; break;
      case 137: bf.fp   = erpm; break;
      case 138: bf.fp   = thetaPark_enc; break;
      case 139: bf.fp   = thetaPark_obs; break;
      case 140: bf.fp   = thetaPark_obs_prev; break;
      case 141: bf.fp   = thetaPark_vesc; break;
      case 142: bf.fp   = co; break;
      case 143: bf.fp   = si; break;
      case 144: bf.fp   = D; break;
      case 145: bf.fp   = Q; break;
      case 146: bf.fp   = tA; break;
      case 147: bf.fp   = tB; break;
      case 148: bf.fp   = tC; break;
      case 149: bf.fp   = Id_e; break;
      case 150: bf.fp   = Id_SP; break;
      case 151: bf.fp   = Iq_e; break;
      case 152: bf.fp   = Iq_SP; break;
      case 153: bf.fp   = ia; break;
      case 154: bf.fp   = ib; break;
      case 155: bf.fp   = ic; break;
      case 156: bf.fp   = acc2; break;
      case 157: bf.fp   = vel2; break;
      case 158: bf.fp   = Ialpha2; break;
      case 159: bf.fp   = Ibeta2; break;
      case 160: bf.fp   = thetaPark2; break;
      case 161: bf.fp   = co2; break;
      case 162: bf.fp   = si2; break;
      case 163: bf.fp   = D2; break;
      case 164: bf.fp   = Q2; break;
      case 165: bf.fp   = tA2; break;
      case 166: bf.fp   = tB2; break;
      case 167: bf.fp   = tC2; break;
      case 168: bf.fp   = Id_e2; break;
      case 169: bf.fp   = Id_SP2; break;
      case 170: bf.fp   = Iq_e2; break;
      case 171: bf.fp   = Iq_SP2; break;
      case 172: bf.fp   = ia2; break;
      case 173: bf.fp   = ib2; break;
      case 174: bf.fp   = ic2; break;
      case 175: bf.fp   = Vq_distgain; break;
      case 176: bf.fp   = Vd_distgain; break;
      case 177: bf.fp   = Iq_distgain; break;
      case 178: bf.fp   = Id_distgain; break;
      case 179: bf.fp   = mechdistgain; break;
      case 180: bf.fp   = maxVolt; break;
      case 181: bf.fp   = Vtot; break;
      case 182: bf.fp   = max_edeltarad; break;
      case 183: bf.fp   = N_pp; break;
      case 184: bf.fp   = Kt_Nm_Arms; break;
      case 185: bf.fp   = Kt_Nm_Apeak; break;
      case 186: bf.fp   = we; break;
      case 187: bf.fp   = Ld; break;
      case 188: bf.fp   = Lq; break;
      case 189: bf.fp   = Lambda_m; break;
      case 190: bf.fp   = observer_gain; break;
      case 191: bf.fp   = x1; break;
      case 192: bf.fp   = x2; break;
      case 193: bf.fp   = Kt_Nm_Arms2; break;
      case 194: bf.fp   = Kt_Nm_Apeak2; break;
      case 195: bf.fp   = we2; break;
      case 196: bf.fp   = Ld2; break;
      case 197: bf.fp   = Lq2; break;
      case 198: bf.fp   = Lambda_m2; break;
      case 199: bf.fp   = hfi_V; break;
      case 200: bf.fp   = hfi_V_act; break;
      case 201: bf.fp   = hfi_dir; break;
      case 202: bf.fp   = hfi_dir_int; break;
      case 203: bf.fp   = Valpha_offset_hfi; break;
      case 204: bf.fp   = Vbeta_offset_hfi; break;
      case 205: bf.fp   = hfi_curtot; break;
      case 206: bf.fp   = hfi_curorttot; break;
      case 207: bf.fp   = hfi_curprev; break;
      case 208: bf.fp   = hfi_curortprev; break;
      case 209: bf.fp   = hfi_gain; break;
      case 210: bf.fp   = hfi_pgain; break;
      case 211: bf.fp   = hfi_curangleest; break;
      case 212: bf.fp   = hfi_dir_int2; break;
      case 213: bf.fp   = hfi_gain_int2; break;
      case 214: bf.fp   = hfi_Id_meas_low; break;
      case 215: bf.fp   = hfi_Iq_meas_low; break;
      case 216: bf.fp   = hfi_Id_meas_high; break;
      case 217: bf.fp   = hfi_Iq_meas_high; break;
      case 218: bf.fp   = delta_id; break;
      case 219: bf.fp   = delta_iq; break;
      case 220: bf.fp   = hfi_advance_factor; break;
      case 221: bf.fp   = hfi_abs_pos; break;
      case 222: bf.fp   = hfi_half_int_prev; break;
      case 223: bf.fp   = hfi_prev; break;
      case 224: bf.fp   = hfi_distgain; break;
      case 225: bf.fp   = hfi_contout; break;
      case 226: bf.fp   = hfi_error; break;
      case 227: bf.fp   = hfi_ffw; break;
      case 228: bf.fp   = hfi_maxvel; break;
      case 229: bf.fp   = VqFF; break;
      case 230: bf.fp   = VdFF; break;
      case 231: bf.fp   = VqFF2; break;
      case 232: bf.fp   = VdFF2; break;
      case 233: bf.fp   = Iq_offset_SP; break;
      case 234: bf.fp   = Id_offset_SP; break;
      case 235: bf.fp   = Id_offset_SP2; break;
      case 236: bf.fp   = Valpha_offset; break;
      case 237: bf.fp   = Vbeta_offset; break;
      case 238: bf.fp   = Valpha2_offset; break;
      case 239: bf.sint = anglechoice; break;
      case 240: bf.sint = timeremain; break;
      case 241: bf.sint = spNgo; break;
      case 242: bf.sint = REFstatus; break;
      case 243: bf.sint = incomingByte; break;
      case 244: bf.sint = encoderPos1; break;
      case 245: bf.sint = encoderPos2; break;
      case 246: bf.sint = enccountperrev; break;
      case 247: bf.sint = enccountperrev2; break;
      case 248: bf.sint = n_senscalib; break;
      case 249: bf.sint = SP_input_status; break;
      case 250: bf.sint = spGO; break;
      case 251: bf.sint = hfi_cursample; break;
      case 252: bf.sint = hfi_maxsamples; break;
      case 253: bf.uint = ridethewave; break;
      case 254: bf.uint = ridethewave2; break;
      case 255: bf.uint = sendall; break;
      case 256: bf.uint = curloop; break;
      case 257: bf.uint = Ndownsample; break;
      case 258: bf.uint = downsample; break;
      case 259: bf.uint = Novervolt; break;
      case 260: bf.uint = Novervolt2; break;
      case 261: bf.uint = NdownsamplePRBS; break;
      case 262: bf.uint = downsamplePRBS; break;
      case 263: bf.uint = ss_n_aver; break;
      case 264: bf.uint = IndexFound1; break;
      case 265: bf.uint = IndexFound2; break;
      case 266: bf.uint = Nsend; break;
      case 267: bf.uint = timePrev; break;
      case 268: bf.uint = curtime; break;
      case 269: bf.uint = overloadcount; break;
      case 270: bf.uint = useIlowpass; break;
      case 271: bf.uint = ContSelect; break;
      case 272: bf.uint = firsterror; break;
      case 273: bf.uint = N_pp2; break;
      case 274: bf.uint = hfi_method; break;
      case 275: bf.bl   = SPdir; break;
      case 276: bf.bl   = is_v7; break;
      case 277: bf.bl   = haptic; break;
      case 278: bf.bl   = revercommutation1; break;
      case 279: bf.bl   = OutputOn; break;
      case 280: bf.bl   = setupready; break;
      case 281: bf.bl   = hfi_on; break;
      case 282: bf.bl   = hfi_firstcycle; break;
      case 283: bf.bl   = hfi_useforfeedback; break;
      case 284: bf.bl   = hfi_use_lowpass; break;
    }
    Serial.write( bf.bin , 4);
  }
}

void setpar( int isignal , binaryFloat bf ) {
  switch( isignal ){
    case   1: advancefactor = bf.fp; break;
    case   2: i_vector_radpers = bf.fp; break;
    case   3: i_vector_radpers_act = bf.fp; break;
    case   4: i_vector_acc = bf.fp; break;
    case   5: maxDutyCycle = bf.fp; break;
    case   6: BEMFa = bf.fp; break;
    case   7: BEMFb = bf.fp; break;
    case   8: Ialpha_last = bf.fp; break;
    case   9: Ibeta_last = bf.fp; break;
    case  10: commutationoffset = bf.fp; break;
    case  11: DQdisturbangle = bf.fp; break;
    case  12: Vq = bf.fp; break;
    case  13: Vd = bf.fp; break;
    case  14: Valpha = bf.fp; break;
    case  15: Vbeta = bf.fp; break;
    case  16: thetawave = bf.fp; break;
    case  17: Id_meas = bf.fp; break;
    case  18: Iq_meas = bf.fp; break;
    case  19: Id_meas_lp = bf.fp; break;
    case  20: Iq_meas_lp = bf.fp; break;
    case  21: VSP = bf.fp; break;
    case  22: commutationoffset2 = bf.fp; break;
    case  23: DQdisturbangle2 = bf.fp; break;
    case  24: Vq2 = bf.fp; break;
    case  25: Vd2 = bf.fp; break;
    case  26: Valpha2 = bf.fp; break;
    case  27: Vbeta2 = bf.fp; break;
    case  28: thetawave2 = bf.fp; break;
    case  29: Id_meas2 = bf.fp; break;
    case  30: Iq_meas2 = bf.fp; break;
    case  31: Id_meas2_lp = bf.fp; break;
    case  32: Iq_meas2_lp = bf.fp; break;
    case  33: Va = bf.fp; break;
    case  34: Vb = bf.fp; break;
    case  35: Vc = bf.fp; break;
    case  36: Va2 = bf.fp; break;
    case  37: Vb2 = bf.fp; break;
    case  38: Vc2 = bf.fp; break;
    case  45: mechcontout = bf.fp; break;
    case  46: Iout = bf.fp; break;
    case  47: mechcontout2 = bf.fp; break;
    case  48: Iout2 = bf.fp; break;
    case  49: muziek_gain = bf.fp; break;
    case  50: muziek_gain_V = bf.fp; break;
    case  51: distval = bf.fp; break;
    case  52: distoff = bf.fp; break;
    case  53: ss_phase = bf.fp; break;
    case  54: ss_fstart = bf.fp; break;
    case  55: ss_fstep = bf.fp; break;
    case  56: ss_fend = bf.fp; break;
    case  57: ss_gain = bf.fp; break;
    case  58: ss_offset = bf.fp; break;
    case  59: ss_f = bf.fp; break;
    case  60: ss_tstart = bf.fp; break;
    case  61: ss_out = bf.fp; break;
    case  65: I_max = bf.fp; break;
    case  66: V_Bus = bf.fp; break;
    case  67: rmech = bf.fp; break;
    case  68: rdelay = bf.fp; break;
    case  69: emech1 = bf.fp; break;
    case  70: ymech1 = bf.fp; break;
    case  71: rmech2 = bf.fp; break;
    case  72: emech2 = bf.fp; break;
    case  73: ymech2 = bf.fp; break;
    case  74: rmechoffset = bf.fp; break;
    case  75: rmechoffset2 = bf.fp; break;
    case  76: sensBus_lp = bf.fp; break;
    case  77: Kp = bf.fp; break;
    case  78: fBW = bf.fp; break;
    case  79: alpha1 = bf.fp; break;
    case  80: alpha2 = bf.fp; break;
    case  81: fInt = bf.fp; break;
    case  82: fLP = bf.fp; break;
    case  83: Kp2 = bf.fp; break;
    case  84: fBW2 = bf.fp; break;
    case  85: alpha1_2 = bf.fp; break;
    case  86: alpha2_2 = bf.fp; break;
    case  87: fInt2 = bf.fp; break;
    case  88: fLP2 = bf.fp; break;
    case  89: Vout = bf.fp; break;
    case  90: fIntCur = bf.fp; break;
    case  91: Kp_iq = bf.fp; break;
    case  92: Kp_id = bf.fp; break;
    case  93: Ki_iq = bf.fp; break;
    case  94: Ki_id = bf.fp; break;
    case  95: vq_int_state = bf.fp; break;
    case  96: vd_int_state = bf.fp; break;
    case  97: Vout2 = bf.fp; break;
    case  98: fIntCur2 = bf.fp; break;
    case  99: Icontgain2 = bf.fp; break;
    case 100: sensCalVal1 = bf.fp; break;
    case 101: sensCalVal2 = bf.fp; break;
    case 102: sensCalVal3 = bf.fp; break;
    case 103: sensCalVal4 = bf.fp; break;
    case 104: sens1 = bf.fp; break;
    case 105: sens2 = bf.fp; break;
    case 106: sens3 = bf.fp; break;
    case 107: sens4 = bf.fp; break;
    case 108: sens1_lp = bf.fp; break;
    case 109: sens2_lp = bf.fp; break;
    case 110: sens3_lp = bf.fp; break;
    case 111: sens4_lp = bf.fp; break;
    case 112: sens1_calib = bf.fp; break;
    case 113: sens2_calib = bf.fp; break;
    case 114: sens3_calib = bf.fp; break;
    case 115: sens4_calib = bf.fp; break;
    case 116: sensBus = bf.fp; break;
    case 117: I_bus = bf.fp; break;
    case 118: P_tot = bf.fp; break;
    case 119: Busadc2Vbus = bf.fp; break;
    case 120: Jload = bf.fp; break;
    case 121: velFF = bf.fp; break;
    case 122: R = bf.fp; break;
    case 123: Jload2 = bf.fp; break;
    case 124: velFF2 = bf.fp; break;
    case 125: offsetVelTot = bf.fp; break;
    case 126: offsetVel = bf.fp; break;
    case 127: offsetVel_lp = bf.fp; break;
    case 128: acc = bf.fp; break;
    case 129: vel = bf.fp; break;
    case 130: dist = bf.fp; break;
    case 131: Ialpha = bf.fp; break;
    case 132: Ibeta = bf.fp; break;
    case 133: thetaPark = bf.fp; break;
    case 134: thetaParkPrev = bf.fp; break;
    case 135: edeltarad = bf.fp; break;
    case 136: eradpers_lp = bf.fp; break;
    case 137: erpm = bf.fp; break;
    case 138: thetaPark_enc = bf.fp; break;
    case 139: thetaPark_obs = bf.fp; break;
    case 140: thetaPark_obs_prev = bf.fp; break;
    case 141: thetaPark_vesc = bf.fp; break;
    case 142: co = bf.fp; break;
    case 143: si = bf.fp; break;
    case 144: D = bf.fp; break;
    case 145: Q = bf.fp; break;
    case 146: tA = bf.fp; break;
    case 147: tB = bf.fp; break;
    case 148: tC = bf.fp; break;
    case 149: Id_e = bf.fp; break;
    case 150: Id_SP = bf.fp; break;
    case 151: Iq_e = bf.fp; break;
    case 152: Iq_SP = bf.fp; break;
    case 153: ia = bf.fp; break;
    case 154: ib = bf.fp; break;
    case 155: ic = bf.fp; break;
    case 156: acc2 = bf.fp; break;
    case 157: vel2 = bf.fp; break;
    case 158: Ialpha2 = bf.fp; break;
    case 159: Ibeta2 = bf.fp; break;
    case 160: thetaPark2 = bf.fp; break;
    case 161: co2 = bf.fp; break;
    case 162: si2 = bf.fp; break;
    case 163: D2 = bf.fp; break;
    case 164: Q2 = bf.fp; break;
    case 165: tA2 = bf.fp; break;
    case 166: tB2 = bf.fp; break;
    case 167: tC2 = bf.fp; break;
    case 168: Id_e2 = bf.fp; break;
    case 169: Id_SP2 = bf.fp; break;
    case 170: Iq_e2 = bf.fp; break;
    case 171: Iq_SP2 = bf.fp; break;
    case 172: ia2 = bf.fp; break;
    case 173: ib2 = bf.fp; break;
    case 174: ic2 = bf.fp; break;
    case 175: Vq_distgain = bf.fp; break;
    case 176: Vd_distgain = bf.fp; break;
    case 177: Iq_distgain = bf.fp; break;
    case 178: Id_distgain = bf.fp; break;
    case 179: mechdistgain = bf.fp; break;
    case 180: maxVolt = bf.fp; break;
    case 181: Vtot = bf.fp; break;
    case 182: max_edeltarad = bf.fp; break;
    case 183: N_pp = bf.fp; break;
    case 184: Kt_Nm_Arms = bf.fp; break;
    case 185: Kt_Nm_Apeak = bf.fp; break;
    case 186: we = bf.fp; break;
    case 187: Ld = bf.fp; break;
    case 188: Lq = bf.fp; break;
    case 189: Lambda_m = bf.fp; break;
    case 190: observer_gain = bf.fp; break;
    case 191: x1 = bf.fp; break;
    case 192: x2 = bf.fp; break;
    case 193: Kt_Nm_Arms2 = bf.fp; break;
    case 194: Kt_Nm_Apeak2 = bf.fp; break;
    case 195: we2 = bf.fp; break;
    case 196: Ld2 = bf.fp; break;
    case 197: Lq2 = bf.fp; break;
    case 198: Lambda_m2 = bf.fp; break;
    case 199: hfi_V = bf.fp; break;
    case 200: hfi_V_act = bf.fp; break;
    case 201: hfi_dir = bf.fp; break;
    case 202: hfi_dir_int = bf.fp; break;
    case 203: Valpha_offset_hfi = bf.fp; break;
    case 204: Vbeta_offset_hfi = bf.fp; break;
    case 205: hfi_curtot = bf.fp; break;
    case 206: hfi_curorttot = bf.fp; break;
    case 207: hfi_curprev = bf.fp; break;
    case 208: hfi_curortprev = bf.fp; break;
    case 209: hfi_gain = bf.fp; break;
    case 210: hfi_pgain = bf.fp; break;
    case 211: hfi_curangleest = bf.fp; break;
    case 212: hfi_dir_int2 = bf.fp; break;
    case 213: hfi_gain_int2 = bf.fp; break;
    case 214: hfi_Id_meas_low = bf.fp; break;
    case 215: hfi_Iq_meas_low = bf.fp; break;
    case 216: hfi_Id_meas_high = bf.fp; break;
    case 217: hfi_Iq_meas_high = bf.fp; break;
    case 218: delta_id = bf.fp; break;
    case 219: delta_iq = bf.fp; break;
    case 220: hfi_advance_factor = bf.fp; break;
    case 221: hfi_abs_pos = bf.fp; break;
    case 222: hfi_half_int_prev = bf.fp; break;
    case 223: hfi_prev = bf.fp; break;
    case 224: hfi_distgain = bf.fp; break;
    case 225: hfi_contout = bf.fp; break;
    case 226: hfi_error = bf.fp; break;
    case 227: hfi_ffw = bf.fp; break;
    case 228: hfi_maxvel = bf.fp; break;
    case 229: VqFF = bf.fp; break;
    case 230: VdFF = bf.fp; break;
    case 231: VqFF2 = bf.fp; break;
    case 232: VdFF2 = bf.fp; break;
    case 233: Iq_offset_SP = bf.fp; break;
    case 234: Id_offset_SP = bf.fp; break;
    case 235: Id_offset_SP2 = bf.fp; break;
    case 236: Valpha_offset = bf.fp; break;
    case 237: Vbeta_offset = bf.fp; break;
    case 238: Valpha2_offset = bf.fp; break;
    case 239: anglechoice = bf.sint; break;
    case 240: timeremain = bf.sint; break;
    case 241: spNgo = bf.sint; break;
    case 242: REFstatus = bf.sint; break;
    case 243: incomingByte = bf.sint; break;
    case 244: encoderPos1 = bf.sint; break;
    case 245: encoderPos2 = bf.sint; break;
    case 248: n_senscalib = bf.sint; break;
    case 249: SP_input_status = bf.sint; break;
    case 250: spGO = bf.sint; break;
    case 251: hfi_cursample = bf.sint; break;
    case 252: hfi_maxsamples = bf.sint; break;
    case 253: ridethewave = bf.uint; break;
    case 254: ridethewave2 = bf.uint; break;
    case 255: sendall = bf.uint; break;
    case 256: curloop = bf.uint; break;
    case 257: Ndownsample = bf.uint; break;
    case 258: downsample = bf.uint; break;
    case 259: Novervolt = bf.uint; break;
    case 260: Novervolt2 = bf.uint; break;
    case 261: NdownsamplePRBS = bf.uint; break;
    case 262: downsamplePRBS = bf.uint; break;
    case 263: ss_n_aver = bf.uint; break;
    case 264: IndexFound1 = bf.uint; break;
    case 265: IndexFound2 = bf.uint; break;
    case 266: Nsend = bf.uint; break;
    case 267: timePrev = bf.uint; break;
    case 268: curtime = bf.uint; break;
    case 269: overloadcount = bf.uint; break;
    case 270: useIlowpass = bf.uint; break;
    case 271: ContSelect = bf.uint; break;
    case 272: firsterror = bf.uint; break;
    case 273: N_pp2 = bf.uint; break;
    case 274: hfi_method = bf.uint; break;
    case 275: SPdir = bf.bl; break;
    case 276: is_v7 = bf.bl; break;
    case 277: haptic = bf.bl; break;
    case 278: revercommutation1 = bf.bl; break;
    case 279: OutputOn = bf.bl; break;
    case 280: setupready = bf.bl; break;
    case 281: hfi_on = bf.bl; break;
    case 282: hfi_firstcycle = bf.bl; break;
    case 283: hfi_useforfeedback = bf.bl; break;
    case 284: hfi_use_lowpass = bf.bl; break;
  }
}

void printSignals( unsigned int selected ) {
  const char *signalNames[] = { "Ts", "advancefactor", "i_vector_radpers", "i_vector_radpers_act", "i_vector_acc", "maxDutyCycle", "BEMFa", "BEMFb", "Ialpha_last", "Ibeta_last", "commutationoffset", "DQdisturbangle", "Vq", "Vd", "Valpha", "Vbeta", "thetawave", "Id_meas", "Iq_meas", "Id_meas_lp", "Iq_meas_lp", "VSP", "commutationoffset2", "DQdisturbangle2", "Vq2", "Vd2", "Valpha2", "Vbeta2", "thetawave2", "Id_meas2", "Iq_meas2", "Id_meas2_lp", "Iq_meas2_lp", "Va", "Vb", "Vc", "Va2", "Vb2", "Vc2", "adc2A1", "adc2A2", "one_by_sqrt3", "two_by_sqrt3", "sqrt_two_three", "sqrt3_by_2", "mechcontout", "Iout", "mechcontout2", "Iout2", "muziek_gain", "muziek_gain_V", "distval", "distoff", "ss_phase", "ss_fstart", "ss_fstep", "ss_fend", "ss_gain", "ss_offset", "ss_f", "ss_tstart", "ss_out", "T", "enc2rad", "enc2rad2", "I_max", "V_Bus", "rmech", "rdelay", "emech1", "ymech1", "rmech2", "emech2", "ymech2", "rmechoffset", "rmechoffset2", "sensBus_lp", "Kp", "fBW", "alpha1", "alpha2", "fInt", "fLP", "Kp2", "fBW2", "alpha1_2", "alpha2_2", "fInt2", "fLP2", "Vout", "fIntCur", "Kp_iq", "Kp_id", "Ki_iq", "Ki_id", "vq_int_state", "vd_int_state", "Vout2", "fIntCur2", "Icontgain2", "sensCalVal1", "sensCalVal2", "sensCalVal3", "sensCalVal4", "sens1", "sens2", "sens3", "sens4", "sens1_lp", "sens2_lp", "sens3_lp", "sens4_lp", "sens1_calib", "sens2_calib", "sens3_calib", "sens4_calib", "sensBus", "I_bus", "P_tot", "Busadc2Vbus", "Jload", "velFF", "R", "Jload2", "velFF2", "offsetVelTot", "offsetVel", "offsetVel_lp", "acc", "vel", "dist", "Ialpha", "Ibeta", "thetaPark", "thetaParkPrev", "edeltarad", "eradpers_lp", "erpm", "thetaPark_enc", "thetaPark_obs", "thetaPark_obs_prev", "thetaPark_vesc", "co", "si", "D", "Q", "tA", "tB", "tC", "Id_e", "Id_SP", "Iq_e", "Iq_SP", "ia", "ib", "ic", "acc2", "vel2", "Ialpha2", "Ibeta2", "thetaPark2", "co2", "si2", "D2", "Q2", "tA2", "tB2", "tC2", "Id_e2", "Id_SP2", "Iq_e2", "Iq_SP2", "ia2", "ib2", "ic2", "Vq_distgain", "Vd_distgain", "Iq_distgain", "Id_distgain", "mechdistgain", "maxVolt", "Vtot", "max_edeltarad", "N_pp", "Kt_Nm_Arms", "Kt_Nm_Apeak", "we", "Ld", "Lq", "Lambda_m", "observer_gain", "x1", "x2", "Kt_Nm_Arms2", "Kt_Nm_Apeak2", "we2", "Ld2", "Lq2", "Lambda_m2", "hfi_V", "hfi_V_act", "hfi_dir", "hfi_dir_int", "Valpha_offset_hfi", "Vbeta_offset_hfi", "hfi_curtot", "hfi_curorttot", "hfi_curprev", "hfi_curortprev", "hfi_gain", "hfi_pgain", "hfi_curangleest", "hfi_dir_int2", "hfi_gain_int2", "hfi_Id_meas_low", "hfi_Iq_meas_low", "hfi_Id_meas_high", "hfi_Iq_meas_high", "delta_id", "delta_iq", "hfi_advance_factor", "hfi_abs_pos", "hfi_half_int_prev", "hfi_prev", "hfi_distgain", "hfi_contout", "hfi_error", "hfi_ffw", "hfi_maxvel", "VqFF", "VdFF", "VqFF2", "VdFF2", "Iq_offset_SP", "Id_offset_SP", "Id_offset_SP2", "Valpha_offset", "Vbeta_offset", "Valpha2_offset", "anglechoice", "timeremain", "spNgo", "REFstatus", "incomingByte", "encoderPos1", "encoderPos2", "enccountperrev", "enccountperrev2", "n_senscalib", "SP_input_status", "spGO", "hfi_cursample", "hfi_maxsamples", "ridethewave", "ridethewave2", "sendall", "curloop", "Ndownsample", "downsample", "Novervolt", "Novervolt2", "NdownsamplePRBS", "downsamplePRBS", "ss_n_aver", "IndexFound1", "IndexFound2", "Nsend", "timePrev", "curtime", "overloadcount", "useIlowpass", "ContSelect", "firsterror", "N_pp2", "hfi_method", "SPdir", "is_v7", "haptic", "revercommutation1", "OutputOn", "setupready", "hfi_on", "hfi_firstcycle", "hfi_useforfeedback", "hfi_use_lowpass",  };
  const char *signalTypes[] = { "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "f", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b",  };
  int imax = 10;
  switch(selected){
    case 0: imax = 285; break;
  }
  for ( int i = 0; i < imax; i++) {
    Serial.println( signalNames[i] );
    Serial.println( signalTypes[i] );
  }
}
